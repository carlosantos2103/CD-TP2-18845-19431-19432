curl -i -H -X POST -d '{"channel: 1, username: ricardo, password: 18845"}' http://localhost:5000/create_register
#TODO: curl -i -H "Content-Type: application/json" -X POST -d '{"channel":"12","username":"ricardo","password":"18845"}' http://localhost:5000/createregister
#TODO: curl -i -H "Content-Type: application/json" -X POST -d '{"channel":"12","username":"ricardo","password":"18845"}' http://localhost:5000/sendmessage
#TODO: curl -i http://localhost:5000/sms/
#TODO: curl -i -H "Content-Type: application/json" -X delete -d '{"channel":"12","username":"ricardo","password":"18845"}' http://localhost:5000/Cancel_channel

import six
from flask import Flask, jsonify, abort, request, make_response, url_for
from flask_httpauth import HTTPBasicAuth

app = Flask(__name__, static_url_path="")
auth = HTTPBasicAuth()


@auth.get_password
def get_password(username):
    return None


@auth.error_handler
def unauthorized():
    # return 403 instead of 401 to prevent browsers from displaying the default
    # auth dialog
    return make_response(jsonify({'error': 'Unauthorized access'}), 403)


@app.errorhandler(400)
def bad_request(error):
    return make_response(jsonify({'error': 'Bad request'}), 400)


@app.errorhandler(404)
def not_found(error):
    return make_response(jsonify({'error': 'Not found'}), 404)

login = [
    {
        'username': 'ricardo',
        'password': '18845'
    },
    {
        'username': 'miguel',
        'password': '12345'
    }
]

channels = [
    {
        'channel_id': 1,
        'users': ['miguel'],
    },
    {
        'channel_id': 12,
        'users': ['ricardo'],
    },
]

messages = [
    {
        'channel':  1,
        'sms': '',
        'username': '',
        'sends': [],
    },
    {
        'channel':  12,
        'sms': '',
        'username': '',
        'sends': [],
    },
]


def write_files(filename, data):
    with open(filename, 'w') as file:
        for f in data:
            file.write(f'''channel: {f['channel']} \n''')
            for user in f['users']:
                file.write(f'''-> user: {user} \n''')
        file.close()

def read_files(filename):
    with open(filename, 'w') as file:
        content = file.read()
        file.close()
        return content

# Registar num canal um utilizador
@app.route('/create_register', methods=['POST'])
def create_register():
    if not request.json or 'channel' not in request.json:
        abort(400)

    # Verifica se existe o canal
    #channel = [channel for channel in channels if channel['channel_id'] == int(request.json['channel'])]
    # Caso nao exista faz um canal novo
    #if len(channel) == 0:
    #    new_channel1 = {
    #        'channel': int(request.json['channel']),
    #        'users': [str(request.json['username'])],
    #    }
    #    channels.append(new_channel1)
        # write_files('channels_data', channels)
    #    return jsonify(channels), 201

    channel = auxiliar_channel(channels, request.json['channel'])

    if channel == None:
        new_channel1 = {
            'channel': int(request.json['channel']),
            'users': [str(request.json['username'])],
        }
        channels.append(new_channel1)
        # write_files('channels_data', channels)
        return jsonify(channels), 201

    # Caso ja exista adiciona o utilizador a lista de utilizadores do canal
    for cha in channel:
        for user in cha['users']:
            # Verifica se existe esse utilizador
            if user == str(request.json['username']):
                abort(404)

    new_canal = {
    'channel_id': int(request.json['channel']),
    'users': cha['users'],
    }
    new_canal['users'].append(request.json['username'])

    delete_element(channels, int(request.json['channel']))
    channels.append(new_canal)

    return jsonify(channels), 201


def auxiliar_channel(channels, id):
    for channel in channels:
        if channel['channel_id'] == id:
            return channel
    return None

def delete_element(canal, id):
    for channel in canal:
        if channel['channel_id'] == int(id):
            print("Fez delete")
            canal.remove(channel)

@app.route('/send_message/<int:channel_id>', methods=['POST'])
def send_message_channel(channel_id):
    if not request.json or 'message' not in request.json:
        abort(400)
    # Verifica se existe o canal
    cha = [cha for cha in channels if cha['channel'] == str(channel_id)]
    if len(cha) == 0:
        abort(404)
    # Verifica se esse utilizador esta no canal
    for channel in channels:
        if channel['channel'] == str(channel_id):
            for user in channel['users']:
                if user['username'] == request.json['username']:
                    print(user)

        else:
            abort(404)
                #message = cha['messages']
                #       # Adiciona a mensagem
                #       message['sms'] = request.json['message']
                #       # Adiciona quem enviou a mensagem
                #       message['username'] = request.json['username']

    return jsonify('Efetuado'), 201

@app.route('/cancel_channel/<int:channel_id>', methods=['DELETE'])
def cancel_channel(channel_id):
    if not request.json or 'username' not in request.json:
        abort(400)

    channel = [ channel for channel in channels if channel['channel_id'] == channel_id ]
    if len(channel) == 0:
        abort(404)
    for cha in channel:
        for user in cha['users']:
            if user == request.json['username']:
                # Remover o utilizador
                cha['users'].remove(user)
                return jsonify(channels), 201
    abort(404)

if __name__ == '__main__':
    app.run(debug=True)